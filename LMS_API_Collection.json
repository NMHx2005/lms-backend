{
  "info": {
    "name": "LMS Learning Management System - Complete API Collection",
    "description": "Comprehensive API collection for LMS Backend organized by Shared, Admin, and Client functionality. Includes all endpoints with detailed examples, test scripts, and environment variables. Total 200+ endpoints across all system modules.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0",
    "author": "LMS Development Team",
    "contact": {
      "name": "API Support",
      "email": "api-support@lms.com",
      "url": "https://lms-docs.com"
    }
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string",
      "description": "Base URL for LMS API (Development)"
    },
    {
      "key": "base_url_prod",
      "value": "https://lms-backend-cf11.onrender.com",
      "type": "string",
      "description": "Base URL for LMS API (Production)"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string",
      "description": "JWT token for admin authentication"
    },
    {
      "key": "client_token",
      "value": "",
      "type": "string",
      "description": "JWT token for client authentication"
    },
    {
      "key": "teacher_token",
      "value": "",
      "type": "string",
      "description": "JWT token for teacher authentication"
    },
    {
      "key": "student_token",
      "value": "",
      "type": "string",
      "description": "JWT token for student authentication"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string",
      "description": "Refresh token for token renewal"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "admin_id",
      "value": "",
      "type": "string",
      "description": "Admin user ID"
    },
    {
      "key": "teacher_id",
      "value": "",
      "type": "string",
      "description": "Teacher user ID"
    },
    {
      "key": "student_id",
      "value": "",
      "type": "string",
      "description": "Student user ID"
    },
    {
      "key": "course_id",
      "value": "",
      "type": "string",
      "description": "Course ID for testing"
    },
    {
      "key": "section_id",
      "value": "",
      "type": "string",
      "description": "Section ID for testing"
    },
    {
      "key": "lesson_id",
      "value": "",
      "type": "string",
      "description": "Lesson ID for testing"
    },
    {
      "key": "comment_id",
      "value": "",
      "type": "string",
      "description": "Comment ID for testing"
    },
    {
      "key": "certificate_id",
      "value": "",
      "type": "string",
      "description": "Certificate ID for testing"
    },
    {
      "key": "payment_id",
      "value": "",
      "type": "string",
      "description": "Payment ID for testing"
    },
    {
      "key": "upload_file_id",
      "value": "",
      "type": "string",
      "description": "Uploaded file public ID"
    },
    {
      "key": "announcement_id",
      "value": "",
      "type": "string",
      "description": "Announcement ID for testing"
    },
    {
      "key": "evaluation_id",
      "value": "",
      "type": "string",
      "description": "AI Evaluation ID for testing"
    },
    {
      "key": "review_id",
      "value": "",
      "type": "string",
      "description": "Review ID for testing"
    },
    {
      "key": "rating_id",
      "value": "",
      "type": "string",
      "description": "Teacher Rating ID for testing"
    },
    {
      "key": "enrollment_id",
      "value": "",
      "type": "string",
      "description": "Enrollment ID for testing"
    },
    {
      "key": "assignment_id",
      "value": "",
      "type": "string",
      "description": "Assignment ID for testing"
    },
    {
      "key": "submission_id",
      "value": "",
      "type": "string",
      "description": "Submission ID for testing"
    },
    {
      "key": "report_id",
      "value": "",
      "type": "string",
      "description": "Report ID for testing"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{admin_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url);",
          "pm.globals.set('request_timestamp', new Date().toISOString());",
          "const requiredVars = ['base_url'];",
          "requiredVars.forEach(varName => {",
          "    if (!pm.collectionVariables.get(varName)) {",
          "        console.warn(`Warning: Required variable '${varName}' is not set`);",
          "    }",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "if (pm.response.headers.get('Content-Type')) {",
          "    pm.test('Response has correct content type', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "üè† Project Information",
      "description": "Basic project information and health check endpoints",
      "item": [
        {
          "name": "Get Home Page",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": []
            },
            "description": "Get basic project information including version, features, and technologies used"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response contains project info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Health check endpoint for monitoring and deployment verification"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check passes', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api"
              ]
            },
            "description": "Get API status and available endpoints overview"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API status is active', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('active');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîß Shared Functionality",
      "description": "Shared APIs used across the system including authentication, file upload, payments, and more",
      "item": [
        {
          "name": "üîê Authentication System",
          "description": "User authentication and authorization endpoints",
          "item": [
            {
              "name": "üë§ User Registration & Login",
              "item": [
                {
                  "name": "User Registration",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/register",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "register"
                      ]
                    },
                    "description": "Register a new user account with comprehensive profile information",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"confirmPassword\": \"SecurePassword123!\",\n  \"role\": \"student\",\n  \"phoneNumber\": \"+1234567890\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"gender\": \"male\",\n  \"country\": \"United States\",\n  \"city\": \"New York\",\n  \"interests\": [\n    \"programming\",\n    \"web-development\",\n    \"javascript\"\n  ],\n  \"agreedToTerms\": true,\n  \"marketingOptIn\": false\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('User registration successful', function () {",
                          "    pm.response.to.have.status(201);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('user');",
                          "    pm.expect(jsonData.data).to.have.property('token');",
                          "});",
                          "if (pm.response.code === 201) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.user) {",
                          "        pm.collectionVariables.set('student_id', response.data.user.id);",
                          "        pm.collectionVariables.set('student_token', response.data.token);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Student Login",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/login",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "login"
                      ]
                    },
                    "description": "Login with student credentials",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"rememberMe\": true,\n  \"deviceInfo\": {\n    \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n    \"platform\": \"Windows\",\n    \"deviceType\": \"desktop\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Login successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('token');",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data) {",
                          "        pm.collectionVariables.set('client_token', response.data.token);",
                          "        pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                          "        if (response.data.user) {",
                          "            pm.collectionVariables.set('user_id', response.data.user.id);",
                          "            if (response.data.user.roles.includes('student')) {",
                          "                pm.collectionVariables.set('student_token', response.data.token);",
                          "            }",
                          "            if (response.data.user.roles.includes('teacher')) {",
                          "                pm.collectionVariables.set('teacher_token', response.data.token);",
                          "                pm.collectionVariables.set('teacher_id', response.data.user.id);",
                          "            }",
                          "            if (response.data.user.roles.includes('admin')) {",
                          "                pm.collectionVariables.set('admin_token', response.data.token);",
                          "                pm.collectionVariables.set('admin_id', response.data.user.id);",
                          "            }",
                          "        }",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Teacher Login",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/login",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "login"
                      ]
                    },
                    "description": "Login with teacher credentials",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"teacher@lms.com\",\n  \"password\": \"teacher123\",\n  \"rememberMe\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.token) {",
                          "        pm.collectionVariables.set('teacher_token', response.data.token);",
                          "        if (response.data.user && response.data.user.id) {",
                          "            pm.collectionVariables.set('teacher_id', response.data.user.id);",
                          "        }",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Admin Login",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/login",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "login"
                      ]
                    },
                    "description": "Login with admin credentials",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"admin@lms.com\",\n  \"password\": \"admin123\",\n  \"rememberMe\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.token) {",
                          "        pm.collectionVariables.set('admin_token', response.data.token);",
                          "        if (response.data.user && response.data.user.id) {",
                          "            pm.collectionVariables.set('admin_id', response.data.user.id);",
                          "        }",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üîë Token Management",
              "item": [
                {
                  "name": "Get Current User",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/me",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "me"
                      ]
                    },
                    "description": "Get current authenticated user information"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('User info retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('user');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Refresh Token",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/refresh-token",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "refresh-token"
                      ]
                    },
                    "description": "Refresh JWT access token using refresh token",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Token refresh successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('token');",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.token) {",
                          "        pm.collectionVariables.set('client_token', response.data.token);",
                          "        if (response.data.refreshToken) {",
                          "            pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                          "        }",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Logout",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/logout",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "logout"
                      ]
                    },
                    "description": "Logout and invalidate tokens",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\",\n  \"logoutAllDevices\": false\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Logout successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    pm.collectionVariables.set('client_token', '');",
                          "    pm.collectionVariables.set('refresh_token', '');",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üîí Password Management",
              "item": [
                {
                  "name": "Forgot Password",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/forgot-password",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "forgot-password"
                      ]
                    },
                    "description": "Send password reset email",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"redirectUrl\": \"https://lms-frontend.com/reset-password\",\n  \"language\": \"en\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Password reset email sent', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Reset Password",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/reset-password",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "reset-password"
                      ]
                    },
                    "description": "Reset password using token from email",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"token\": \"reset_token_from_email\",\n  \"newPassword\": \"NewSecurePassword123!\",\n  \"confirmPassword\": \"NewSecurePassword123!\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Password reset successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Change Password",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/auth/change-password",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "auth",
                        "change-password"
                      ]
                    },
                    "description": "Change password for authenticated user",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"currentPassword\": \"SecurePassword123!\",\n  \"newPassword\": \"NewSecurePassword456!\",\n  \"confirmPassword\": \"NewSecurePassword456!\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Password change successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üîó Google OAuth Integration",
          "description": "Google OAuth authentication and account linking",
          "item": [
            {
              "name": "Get OAuth Config",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/config",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google",
                    "config"
                  ]
                },
                "description": "Get Google OAuth configuration for client-side implementation"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OAuth config retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('clientId');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Start Google OAuth Flow",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/?state=random_state_string",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google"
                  ],
                  "query": [
                    {
                      "key": "state",
                      "value": "random_state_string",
                      "description": "State parameter for CSRF protection"
                    }
                  ]
                },
                "description": "Initiate Google OAuth flow - redirects to Google"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OAuth flow initiated', function () {",
                      "    pm.expect([200, 302]).to.include(pm.response.code);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Google OAuth Callback",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/callback?code=GOOGLE_AUTH_CODE&state=random_state_string",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google",
                    "callback"
                  ],
                  "query": [
                    {
                      "key": "code",
                      "value": "GOOGLE_AUTH_CODE",
                      "description": "Authorization code from Google"
                    },
                    {
                      "key": "state",
                      "value": "random_state_string",
                      "description": "State parameter for CSRF protection"
                    }
                  ]
                },
                "description": "Handle Google OAuth callback with authorization code"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Callback handled successfully', function () {",
                      "    pm.expect([200, 302]).to.include(pm.response.code);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Link Google Account",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/link",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google",
                    "link"
                  ]
                },
                "description": "Link existing account with Google OAuth",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"googleAccessToken\": \"google_access_token_from_frontend\",\n  \"googleIdToken\": \"google_id_token_from_frontend\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Google account linked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Unlink Google Account",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/unlink",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google",
                    "unlink"
                  ]
                },
                "description": "Unlink Google account from user profile",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"confirmUnlink\": true,\n  \"reason\": \"No longer want to use Google login\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Google account unlinked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Check OAuth Status",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/auth/google/status",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "auth",
                    "google",
                    "status"
                  ]
                },
                "description": "Check if user has Google account linked"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OAuth status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('isLinked');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üí¨ Comments System",
          "description": "Comprehensive commenting system with moderation and engagement features",
          "item": [
            {
              "name": "üìñ Public Comment Operations",
              "item": [
                {
                  "name": "Get Comments with Filters",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments?contentType=course&contentId={{course_id}}&page=1&limit=10&sortBy=createdAt&sortOrder=desc&status=approved",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "contentType",
                          "value": "course",
                          "description": "Type of content (course, lesson, announcement)"
                        },
                        {
                          "key": "contentId",
                          "value": "{{course_id}}",
                          "description": "ID of the content"
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "description": "Page number for pagination"
                        },
                        {
                          "key": "limit",
                          "value": "10",
                          "description": "Number of comments per page"
                        },
                        {
                          "key": "sortBy",
                          "value": "createdAt",
                          "description": "Field to sort by"
                        },
                        {
                          "key": "sortOrder",
                          "value": "desc",
                          "description": "Sort order (asc, desc)"
                        },
                        {
                          "key": "status",
                          "value": "approved",
                          "description": "Comment status filter"
                        }
                      ]
                    },
                    "description": "Get comments with various filters and pagination"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comments retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('comments');",
                          "    pm.expect(jsonData.data).to.have.property('pagination');",
                          "});",
                          "pm.test('Pagination info is correct', function () {",
                          "    const pagination = pm.response.json().data.pagination;",
                          "    pm.expect(pagination).to.have.property('currentPage');",
                          "    pm.expect(pagination).to.have.property('totalPages');",
                          "    pm.expect(pagination).to.have.property('totalComments');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Comment Tree Structure",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/tree/course/{{course_id}}?maxDepth=5&includeDeleted=false",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "tree",
                        "course",
                        "{{course_id}}"
                      ],
                      "query": [
                        {
                          "key": "maxDepth",
                          "value": "5",
                          "description": "Maximum nesting depth"
                        },
                        {
                          "key": "includeDeleted",
                          "value": "false",
                          "description": "Include deleted comments"
                        }
                      ]
                    },
                    "description": "Get comments organized in a tree structure with nested replies"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment tree retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('commentTree');",
                          "});",
                          "pm.test('Tree structure is valid', function () {",
                          "    const tree = pm.response.json().data.commentTree;",
                          "    if (tree.length > 0) {",
                          "        pm.expect(tree[0]).to.have.property('replies');",
                          "        pm.expect(tree[0]).to.have.property('depth');",
                          "    }",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Comment by ID",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}?includeReplies=true&includeAuthor=true",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}"
                      ],
                      "query": [
                        {
                          "key": "includeReplies",
                          "value": "true",
                          "description": "Include reply comments"
                        },
                        {
                          "key": "includeAuthor",
                          "value": "true",
                          "description": "Include author information"
                        }
                      ]
                    },
                    "description": "Get a specific comment by its ID with optional related data"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('comment');",
                          "});",
                          "pm.test('Comment has required fields', function () {",
                          "    const comment = pm.response.json().data.comment;",
                          "    pm.expect(comment).to.have.property('_id');",
                          "    pm.expect(comment).to.have.property('content');",
                          "    pm.expect(comment).to.have.property('author');",
                          "    pm.expect(comment).to.have.property('createdAt');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Comment Statistics",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/stats?contentType=course&contentId={{course_id}}&period=month",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "stats"
                      ],
                      "query": [
                        {
                          "key": "contentType",
                          "value": "course",
                          "description": "Filter by content type"
                        },
                        {
                          "key": "contentId",
                          "value": "{{course_id}}",
                          "description": "Filter by content ID"
                        },
                        {
                          "key": "period",
                          "value": "month",
                          "description": "Time period for stats"
                        }
                      ]
                    },
                    "description": "Get comment statistics and analytics"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment stats retrieved', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('stats');",
                          "});",
                          "pm.test('Stats contain expected metrics', function () {",
                          "    const stats = pm.response.json().data.stats;",
                          "    pm.expect(stats).to.have.property('totalComments');",
                          "    pm.expect(stats).to.have.property('approvedComments');",
                          "    pm.expect(stats).to.have.property('pendingComments');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üîê Protected Comment Operations",
              "item": [
                {
                  "name": "Create New Comment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments"
                      ]
                    },
                    "description": "Create a new comment on course, lesson, or announcement",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"content\": \"This is an excellent course! The instructor explains complex concepts very clearly and the hands-on exercises are really helpful for understanding the material. I especially loved the practical examples and real-world applications.\",\n  \"contentType\": \"course\",\n  \"contentId\": \"{{course_id}}\",\n  \"parentId\": null,\n  \"isAnonymous\": false,\n  \"metadata\": {\n    \"rating\": 5,\n    \"completedPercentage\": 75,\n    \"deviceType\": \"desktop\",\n    \"location\": \"lesson-3\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment created successfully', function () {",
                          "    pm.response.to.have.status(201);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('comment');",
                          "});",
                          "pm.test('Comment has correct data', function () {",
                          "    const comment = pm.response.json().data.comment;",
                          "    pm.expect(comment.contentType).to.eql('course');",
                          "    pm.expect(comment.contentId).to.eql(pm.collectionVariables.get('course_id'));",
                          "    pm.expect(comment.parentId).to.be.null;",
                          "});",
                          "if (pm.response.code === 201) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.comment && response.data.comment._id) {",
                          "        pm.collectionVariables.set('comment_id', response.data.comment._id);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Reply Comment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments"
                      ]
                    },
                    "description": "Create a reply to an existing comment",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"content\": \"I completely agree! The instructor's teaching style is very engaging and the course structure makes it easy to follow along. Have you tried the advanced exercises in the later modules?\",\n  \"contentType\": \"course\",\n  \"contentId\": \"{{course_id}}\",\n  \"parentId\": \"{{comment_id}}\",\n  \"isAnonymous\": false,\n  \"metadata\": {\n    \"replyDepth\": 1,\n    \"mentionedUsers\": [],\n    \"deviceType\": \"mobile\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Reply created successfully', function () {",
                          "    pm.response.to.have.status(201);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    const comment = jsonData.data.comment;",
                          "    pm.expect(comment.parentId).to.eql(pm.collectionVariables.get('comment_id'));",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Update Comment",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}"
                      ]
                    },
                    "description": "Update an existing comment (only by author or admin)",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"content\": \"Updated comment: This is an absolutely fantastic course! The instructor explains complex concepts very clearly and the hands-on exercises are really helpful. I especially loved the practical examples and real-world applications. Highly recommended for beginners!\",\n  \"editReason\": \"Added more details and recommendation\",\n  \"metadata\": {\n    \"rating\": 5,\n    \"completedPercentage\": 90,\n    \"lastEditDevice\": \"desktop\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment updated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data.comment.content).to.include('Updated comment');",
                          "});",
                          "pm.test('Edit history is tracked', function () {",
                          "    const comment = pm.response.json().data.comment;",
                          "    pm.expect(comment).to.have.property('editHistory');",
                          "    pm.expect(comment.isEdited).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Delete Comment",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}"
                      ]
                    },
                    "description": "Delete a comment (soft delete by default to preserve reply structure)",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"reason\": \"User requested deletion\",\n  \"softDelete\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment deleted successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üëç Engagement Actions",
              "item": [
                {
                  "name": "Toggle Like Comment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}/like",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}",
                        "like"
                      ]
                    },
                    "description": "Like or unlike a comment (toggle action)",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"like\",\n  \"metadata\": {\n    \"deviceType\": \"desktop\",\n    \"timestamp\": \"{{$isoTimestamp}}\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Like action successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('action');",
                          "    pm.expect(jsonData.data).to.have.property('likesCount');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Toggle Dislike Comment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}/dislike",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}",
                        "dislike"
                      ]
                    },
                    "description": "Dislike or remove dislike from a comment (toggle action)",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"action\": \"dislike\",\n  \"metadata\": {\n    \"deviceType\": \"desktop\",\n    \"timestamp\": \"{{$isoTimestamp}}\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Dislike action successful', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('action');",
                          "    pm.expect(jsonData.data).to.have.property('dislikesCount');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Mark Comment as Helpful",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}/helpful",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}",
                        "helpful"
                      ]
                    },
                    "description": "Mark a comment as helpful or not helpful",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"helpful\": true,\n  \"reason\": \"Provided useful information that helped me understand the concept\",\n  \"metadata\": {\n    \"context\": \"studying-for-exam\",\n    \"userLevel\": \"beginner\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Helpful vote recorded', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('helpfulVotes');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Report Comment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/comments/{{comment_id}}/report",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "comments",
                        "{{comment_id}}",
                        "report"
                      ]
                    },
                    "description": "Report a comment for inappropriate content or policy violation",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"reason\": \"inappropriate\",\n  \"category\": \"offensive-language\",\n  \"details\": \"This comment contains inappropriate language that violates community guidelines\",\n  \"evidence\": {\n    \"screenshots\": [],\n    \"additionalContext\": \"Comment appeared in course discussion section\"\n  },\n  \"priority\": \"medium\",\n  \"anonymous\": false\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Comment reported successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('reportId');",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.reportId) {",
                          "        pm.collectionVariables.set('report_id', response.data.reportId);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üìö Enhanced Course Fields",
          "description": "Advanced course filtering, search, and analytics with enhanced metadata",
          "item": [
            {
              "name": "üìñ Public Course Operations",
              "item": [
                {
                  "name": "Get Courses with Enhanced Filters",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/courses/enhanced?category=programming&subcategory=web-development&difficulty=beginner&targetAudience=students&ageGroup=adult&accessibility.subtitles=true&technicalRequirements.bandwidth=medium&learningPath=structured&gamification.enabled=true&page=1&limit=12&sortBy=popularity&sortOrder=desc",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "courses",
                        "enhanced"
                      ],
                      "query": [
                        {
                          "key": "category",
                          "value": "programming",
                          "description": "Main category filter"
                        },
                        {
                          "key": "subcategory",
                          "value": "web-development",
                          "description": "Subcategory filter"
                        },
                        {
                          "key": "difficulty",
                          "value": "beginner",
                          "description": "Difficulty level (beginner, intermediate, advanced)"
                        },
                        {
                          "key": "targetAudience",
                          "value": "students",
                          "description": "Target audience filter"
                        },
                        {
                          "key": "ageGroup",
                          "value": "adult",
                          "description": "Age group filter"
                        },
                        {
                          "key": "accessibility.subtitles",
                          "value": "true",
                          "description": "Accessibility features filter"
                        },
                        {
                          "key": "technicalRequirements.bandwidth",
                          "value": "medium",
                          "description": "Technical requirements filter"
                        },
                        {
                          "key": "learningPath",
                          "value": "structured",
                          "description": "Learning path type"
                        },
                        {
                          "key": "gamification.enabled",
                          "value": "true",
                          "description": "Gamification features"
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "description": "Page number"
                        },
                        {
                          "key": "limit",
                          "value": "12",
                          "description": "Items per page"
                        },
                        {
                          "key": "sortBy",
                          "value": "popularity",
                          "description": "Sort field"
                        },
                        {
                          "key": "sortOrder",
                          "value": "desc",
                          "description": "Sort order"
                        }
                      ]
                    },
                    "description": "Get courses with comprehensive filtering options including accessibility, technical requirements, and gamification features"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Enhanced courses retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('courses');",
                          "    pm.expect(jsonData.data).to.have.property('filters');",
                          "    pm.expect(jsonData.data).to.have.property('pagination');",
                          "});",
                          "pm.test('Courses have enhanced fields', function () {",
                          "    const courses = pm.response.json().data.courses;",
                          "    if (courses.length > 0) {",
                          "        const course = courses[0];",
                          "        pm.expect(course).to.have.property('category');",
                          "        pm.expect(course).to.have.property('difficulty');",
                          "        pm.expect(course).to.have.property('accessibility');",
                          "        pm.expect(course).to.have.property('technicalRequirements');",
                          "        pm.collectionVariables.set('course_id', course._id);",
                          "    }",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Search Courses (Full-text)",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/courses/search?q=javascript programming react&filters[difficulty]=beginner,intermediate&filters[category]=programming,web-development&filters[duration][min]=10&filters[duration][max]=50&filters[price][min]=0&filters[price][max]=100&filters[rating][min]=4&highlightMatches=true&includeSnippets=true&page=1&limit=10",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "courses",
                        "search"
                      ],
                      "query": [
                        {
                          "key": "q",
                          "value": "javascript programming react",
                          "description": "Search query"
                        },
                        {
                          "key": "filters[difficulty]",
                          "value": "beginner,intermediate",
                          "description": "Multiple difficulty levels"
                        },
                        {
                          "key": "filters[category]",
                          "value": "programming,web-development",
                          "description": "Multiple categories"
                        },
                        {
                          "key": "filters[duration][min]",
                          "value": "10",
                          "description": "Minimum duration in hours"
                        },
                        {
                          "key": "filters[duration][max]",
                          "value": "50",
                          "description": "Maximum duration in hours"
                        },
                        {
                          "key": "filters[price][min]",
                          "value": "0",
                          "description": "Minimum price"
                        },
                        {
                          "key": "filters[price][max]",
                          "value": "100",
                          "description": "Maximum price"
                        },
                        {
                          "key": "filters[rating][min]",
                          "value": "4",
                          "description": "Minimum rating"
                        },
                        {
                          "key": "highlightMatches",
                          "value": "true",
                          "description": "Highlight search matches"
                        },
                        {
                          "key": "includeSnippets",
                          "value": "true",
                          "description": "Include content snippets"
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "description": "Page number"
                        },
                        {
                          "key": "limit",
                          "value": "10",
                          "description": "Results per page"
                        }
                      ]
                    },
                    "description": "Advanced full-text search with multiple filters and highlighting"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Search completed successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('results');",
                          "    pm.expect(jsonData.data).to.have.property('searchMetadata');",
                          "});",
                          "pm.test('Search metadata is present', function () {",
                          "    const metadata = pm.response.json().data.searchMetadata;",
                          "    pm.expect(metadata).to.have.property('totalResults');",
                          "    pm.expect(metadata).to.have.property('searchTime');",
                          "    pm.expect(metadata).to.have.property('appliedFilters');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Course Stats by Category",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/courses/stats/category?includeSubcategories=true&period=all&groupBy=category",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "courses",
                        "stats",
                        "category"
                      ],
                      "query": [
                        {
                          "key": "includeSubcategories",
                          "value": "true",
                          "description": "Include subcategory breakdown"
                        },
                        {
                          "key": "period",
                          "value": "all",
                          "description": "Time period for stats"
                        },
                        {
                          "key": "groupBy",
                          "value": "category",
                          "description": "Grouping method"
                        }
                      ]
                    },
                    "description": "Get comprehensive statistics by course categories and subcategories"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Category stats retrieved', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('categoryStats');",
                          "});",
                          "pm.test('Stats contain expected metrics', function () {",
                          "    const stats = pm.response.json().data.categoryStats;",
                          "    if (stats.length > 0) {",
                          "        const category = stats[0];",
                          "        pm.expect(category).to.have.property('category');",
                          "        pm.expect(category).to.have.property('courseCount');",
                          "        pm.expect(category).to.have.property('totalEnrollments');",
                          "    }",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üîê Protected Course Operations",
              "item": [
                {
                  "name": "Update Course Analytics",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{teacher_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/courses/{{course_id}}/analytics",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "courses",
                        "{{course_id}}",
                        "analytics"
                      ]
                    },
                    "description": "Update comprehensive course analytics including engagement metrics, dropoff points, and demographic data",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"analytics\": {\n    \"viewCount\": 2150,\n    \"uniqueViews\": 1890,\n    \"conversionRate\": 0.28,\n    \"retentionRate\": 0.87,\n    \"avgCompletionTime\": 32,\n    \"completionRate\": 0.75,\n    \"dropoffPoints\": [\n      {\n        \"lesson\": \"Introduction to Variables\",\n        \"percentage\": 15,\n        \"timestamp\": \"00:05:30\"\n      },\n      {\n        \"lesson\": \"Advanced Functions\",\n        \"percentage\": 25,\n        \"timestamp\": \"01:15:45\"\n      }\n    ],\n    \"popularSections\": [\n      {\n        \"sectionId\": \"section_1\",\n        \"viewCount\": 1200,\n        \"avgTimeSpent\": 450\n      }\n    ],\n    \"studentFeedbackSummary\": {\n      \"positiveKeywords\": [\n        \"clear\",\n        \"helpful\",\n        \"practical\"\n      ],\n      \"negativeKeywords\": [\n        \"fast\",\n        \"complex\"\n      ],\n      \"overallSentiment\": \"positive\"\n    },\n    \"deviceBreakdown\": {\n      \"desktop\": 0.65,\n      \"mobile\": 0.25,\n      \"tablet\": 0.1\n    },\n    \"geographicData\": {\n      \"topCountries\": [\n        \"US\",\n        \"UK\",\n        \"CA\",\n        \"AU\"\n      ],\n      \"timezoneDistribution\": {\n        \"UTC-5\": 0.4,\n        \"UTC+0\": 0.3,\n        \"UTC+7\": 0.2,\n        \"UTC+10\": 0.1\n      }\n    }\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Analytics updated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('analytics');",
                          "});",
                          "pm.test('Analytics contain detailed metrics', function () {",
                          "    const analytics = pm.response.json().data.analytics;",
                          "    pm.expect(analytics).to.have.property('viewCount');",
                          "    pm.expect(analytics).to.have.property('conversionRate');",
                          "    pm.expect(analytics).to.have.property('dropoffPoints');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Course Recommendations",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/courses/recommendations",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "courses",
                        "recommendations"
                      ]
                    },
                    "description": "Get personalized course recommendations based on user preferences, learning history, and current context",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"preferences\": {\n    \"categories\": [\n      \"programming\",\n      \"web-development\",\n      \"data-science\"\n    ],\n    \"subcategories\": [\n      \"javascript\",\n      \"react\",\n      \"python\",\n      \"machine-learning\"\n    ],\n    \"difficulty\": \"beginner-intermediate\",\n    \"maxDuration\": 40,\n    \"minDuration\": 5,\n    \"priceRange\": {\n      \"min\": 0,\n      \"max\": 150\n    },\n    \"learningStyle\": \"hands-on\",\n    \"timeAvailability\": {\n      \"hoursPerWeek\": 8,\n      \"preferredSchedule\": \"evening\",\n      \"timezone\": \"America/New_York\"\n    },\n    \"accessibilityNeeds\": {\n      \"subtitles\": true,\n      \"slowPaced\": false,\n      \"screenReaderCompatible\": false\n    },\n    \"devicePreference\": \"desktop\",\n    \"languagePreference\": \"en\",\n    \"goals\": [\n      \"career-change\",\n      \"skill-improvement\",\n      \"certification\"\n    ]\n  },\n  \"excludeCompleted\": true,\n  \"excludeEnrolled\": true,\n  \"includePrerequisites\": true,\n  \"recommendationContext\": {\n    \"currentCourse\": \"{{course_id}}\",\n    \"completionPercentage\": 75,\n    \"strugglingTopics\": [\n      \"async-programming\",\n      \"error-handling\"\n    ],\n    \"strongTopics\": [\n      \"variables\",\n      \"functions\",\n      \"loops\"\n    ]\n  },\n  \"limit\": 8,\n  \"includeSimilarUsers\": true,\n  \"includeReasoningExplanation\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Recommendations generated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('recommendations');",
                          "});",
                          "pm.test('Recommendations include reasoning', function () {",
                          "    const recommendations = pm.response.json().data.recommendations;",
                          "    if (recommendations.length > 0) {",
                          "        const rec = recommendations[0];",
                          "        pm.expect(rec).to.have.property('course');",
                          "        pm.expect(rec).to.have.property('score');",
                          "        pm.expect(rec).to.have.property('reasoning');",
                          "    }",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üì§ File Upload System",
          "description": "Comprehensive file upload and management system with Cloudinary integration",
          "item": [
            {
              "name": "üè• System Health & Info",
              "item": [
                {
                  "name": "Upload Service Health Check",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/upload/health",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "health"
                      ]
                    },
                    "description": "Check upload service health and configuration"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Upload service is healthy', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('cloudinaryConnected');",
                          "});",
                          "pm.test('Service configuration is valid', function () {",
                          "    const data = pm.response.json().data;",
                          "    pm.expect(data).to.have.property('maxFileSize');",
                          "    pm.expect(data).to.have.property('supportedFormats');",
                          "    pm.expect(data).to.have.property('storageUsed');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üìÅ Single File Uploads",
              "item": [
                {
                  "name": "Upload Single Image",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "image",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/single/image",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "single",
                        "image"
                      ]
                    },
                    "description": "Upload a single image file with validation and optimization"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Image uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('url');",
                          "    pm.expect(jsonData.data).to.have.property('publicId');",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.publicId) {",
                          "        pm.collectionVariables.set('upload_file_id', response.data.publicId);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Upload Single Video",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "video",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/single/video",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "single",
                        "video"
                      ]
                    },
                    "description": "Upload a single video file with processing and thumbnail generation"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Video uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('url');",
                          "    pm.expect(jsonData.data).to.have.property('duration');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Upload Single Document",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "document",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/single/document",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "single",
                        "document"
                      ]
                    },
                    "description": "Upload a single document file with virus scanning and metadata extraction"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Document uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('url');",
                          "    pm.expect(jsonData.data).to.have.property('fileSize');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üì¶ Multiple File Uploads",
              "item": [
                {
                  "name": "Upload Multiple Images",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "images",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/multiple/images",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "multiple",
                        "images"
                      ]
                    },
                    "description": "Upload multiple images with batch processing and optimization"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Multiple images uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('files');",
                          "    pm.expect(jsonData.data.files).to.be.an('array');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Upload Multiple Documents",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "documents",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/multiple/documents",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "multiple",
                        "documents"
                      ]
                    },
                    "description": "Upload multiple documents with batch validation and processing"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Multiple documents uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('files');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üéØ Specialized Uploads",
              "item": [
                {
                  "name": "Upload Profile Picture",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "profilePicture",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/profile-picture",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "profile-picture"
                      ]
                    },
                    "description": "Upload user profile picture with automatic resizing and cropping"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Profile picture uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('avatarUrl');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Upload Course Thumbnail",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{teacher_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "thumbnail",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/course-thumbnail",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "course-thumbnail"
                      ]
                    },
                    "description": "Upload course thumbnail with multiple size variants"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Course thumbnail uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('thumbnailUrl');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Upload Course Materials",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{teacher_token}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "materials",
                          "type": "file",
                          "value": "",
                          "src": []
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{base_url}}/api/upload/course-materials",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "course-materials"
                      ]
                    },
                    "description": "Upload course materials including videos, documents, and resources"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Course materials uploaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('materials');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üóÇÔ∏è File Management",
              "item": [
                {
                  "name": "Delete Single File",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/upload/file",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "file"
                      ]
                    },
                    "description": "Delete a single file from storage",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"publicId\": \"{{upload_file_id}}\",\n  \"resourceType\": \"image\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('File deleted successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get File Info",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/upload/file/{{upload_file_id}}/image",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "file",
                        "{{upload_file_id}}",
                        "image"
                      ]
                    },
                    "description": "Get detailed information about an uploaded file"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('File info retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('fileInfo');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Generate Signed Upload URL",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/upload/signed-url",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "upload",
                        "signed-url"
                      ]
                    },
                    "description": "Generate a signed URL for direct client-side uploads",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"resourceType\": \"image\",\n  \"folder\": \"courses/thumbnails\",\n  \"transformation\": {\n    \"width\": 800,\n    \"height\": 600,\n    \"crop\": \"fill\",\n    \"quality\": \"auto\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Signed URL generated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('signedUrl');",
                          "    pm.expect(jsonData.data).to.have.property('publicId');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üí∞ Payment System (VNPay)",
          "description": "Comprehensive payment processing system with VNPay integration",
          "item": [
            {
              "name": "üí≥ Payment Processing",
              "item": [
                {
                  "name": "Create Payment",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/payments/create",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "payments",
                        "create"
                      ]
                    },
                    "description": "Create a new payment request for course enrollment",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"courseId\": \"{{course_id}}\",\n  \"amount\": 50000,\n  \"currency\": \"VND\",\n  \"description\": \"Payment for JavaScript Course\",\n  \"returnUrl\": \"https://lms-frontend.com/payment/success\",\n  \"cancelUrl\": \"https://lms-frontend.com/payment/cancel\",\n  \"customerInfo\": {\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+84123456789\",\n    \"name\": \"John Doe\"\n  },\n  \"orderInfo\": {\n    \"items\": [\n      {\n        \"name\": \"JavaScript Programming Course\",\n        \"quantity\": 1,\n        \"price\": 50000\n      }\n    ],\n    \"discount\": 0,\n    \"tax\": 0,\n    \"shipping\": 0\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment created successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('paymentUrl');",
                          "    pm.expect(jsonData.data).to.have.property('paymentId');",
                          "});",
                          "if (pm.response.code === 200) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.paymentId) {",
                          "        pm.collectionVariables.set('payment_id', response.data.paymentId);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "VNPay Return URL",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/payments/return?vnp_Amount=5000000&vnp_BankCode=NCB&vnp_OrderInfo=Payment for course&vnp_ResponseCode=00&vnp_TransactionNo=123456789&vnp_TxnRef={{payment_id}}&vnp_SecureHash=SAMPLE_HASH",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "payments",
                        "return"
                      ],
                      "query": [
                        {
                          "key": "vnp_Amount",
                          "value": "5000000",
                          "description": "Payment amount in VND cents"
                        },
                        {
                          "key": "vnp_BankCode",
                          "value": "NCB",
                          "description": "Bank code"
                        },
                        {
                          "key": "vnp_OrderInfo",
                          "value": "Payment for course",
                          "description": "Order information"
                        },
                        {
                          "key": "vnp_ResponseCode",
                          "value": "00",
                          "description": "Response code (00 = success)"
                        },
                        {
                          "key": "vnp_TransactionNo",
                          "value": "123456789",
                          "description": "VNPay transaction number"
                        },
                        {
                          "key": "vnp_TxnRef",
                          "value": "{{payment_id}}",
                          "description": "Merchant transaction reference"
                        },
                        {
                          "key": "vnp_SecureHash",
                          "value": "SAMPLE_HASH",
                          "description": "Security hash"
                        }
                      ]
                    },
                    "description": "Handle VNPay payment return callback"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment return handled successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "VNPay IPN Callback",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/payments/ipn",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "payments",
                        "ipn"
                      ]
                    },
                    "description": "Handle VNPay Instant Payment Notification",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"vnp_Amount\": \"5000000\",\n  \"vnp_BankCode\": \"NCB\",\n  \"vnp_OrderInfo\": \"Payment for course\",\n  \"vnp_ResponseCode\": \"00\",\n  \"vnp_TransactionNo\": \"123456789\",\n  \"vnp_TxnRef\": \"{{payment_id}}\",\n  \"vnp_SecureHash\": \"SAMPLE_HASH\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('IPN processed successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData).to.have.property('RspCode', '00');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Payment History",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/payments/history?page=1&limit=10&status=all&startDate=2025-01-01&endDate=2025-01-31&courseId={{course_id}}",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "payments",
                        "history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "1",
                          "description": "Page number"
                        },
                        {
                          "key": "limit",
                          "value": "10",
                          "description": "Items per page"
                        },
                        {
                          "key": "status",
                          "value": "all",
                          "description": "Payment status filter"
                        },
                        {
                          "key": "startDate",
                          "value": "2025-01-01",
                          "description": "Start date filter"
                        },
                        {
                          "key": "endDate",
                          "value": "2025-01-31",
                          "description": "End date filter"
                        },
                        {
                          "key": "courseId",
                          "value": "{{course_id}}",
                          "description": "Filter by course"
                        }
                      ]
                    },
                    "description": "Get user's payment history with filtering options"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment history retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('payments');",
                          "    pm.expect(jsonData.data).to.have.property('pagination');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Request Refund",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/payments/refund",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "payments",
                        "refund"
                      ]
                    },
                    "description": "Request a refund for a completed payment",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"paymentId\": \"{{payment_id}}\",\n  \"reason\": \"Course not as expected\",\n  \"amount\": 50000,\n  \"refundType\": \"full\",\n  \"description\": \"Customer requested full refund due to course content mismatch\",\n  \"bankAccount\": {\n    \"accountNumber\": \"1234567890\",\n    \"bankName\": \"Vietcombank\",\n    \"accountHolder\": \"John Doe\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Refund requested successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('refundId');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üõí Shopping Cart",
              "item": [
                {
                  "name": "Get Cart",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart"
                      ]
                    },
                    "description": "Get current user's shopping cart contents"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Cart retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('cart');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Add Course to Cart",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/add",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "add"
                      ]
                    },
                    "description": "Add a course to the shopping cart",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"courseId\": \"{{course_id}}\",\n  \"quantity\": 1,\n  \"couponCode\": \"NEWUSER10\",\n  \"giftRecipient\": null\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Course added to cart successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('cart');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Update Cart Item",
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/update",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "update"
                      ]
                    },
                    "description": "Update cart item quantity or apply coupons",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"courseId\": \"{{course_id}}\",\n  \"quantity\": 1,\n  \"couponCode\": \"SAVE20\",\n  \"removeItem\": false\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Cart updated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Remove Course from Cart",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/remove/{{course_id}}",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "remove",
                        "{{course_id}}"
                      ]
                    },
                    "description": "Remove a course from the shopping cart"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Course removed from cart successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Clear Cart",
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/clear",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "clear"
                      ]
                    },
                    "description": "Clear all items from the shopping cart"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Cart cleared successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Checkout Cart",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/checkout",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "checkout"
                      ]
                    },
                    "description": "Proceed to checkout with cart contents",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"paymentMethod\": \"vnpay\",\n  \"couponCode\": \"SAVE10\",\n  \"billingAddress\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+84123456789\",\n    \"address\": \"123 Main St\",\n    \"city\": \"Ho Chi Minh City\",\n    \"country\": \"Vietnam\",\n    \"zipCode\": \"700000\"\n  },\n  \"saveAddress\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Checkout initiated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('paymentUrl');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Cart Total",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/cart/total?couponCode=SAVE10&includeShipping=false",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "cart",
                        "total"
                      ],
                      "query": [
                        {
                          "key": "couponCode",
                          "value": "SAVE10",
                          "description": "Coupon code to apply"
                        },
                        {
                          "key": "includeShipping",
                          "value": "false",
                          "description": "Include shipping costs"
                        }
                      ]
                    },
                    "description": "Calculate cart total with taxes and discounts"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Cart total calculated successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('total');",
                          "    pm.expect(jsonData.data).to.have.property('breakdown');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üìÑ Certificate System",
          "description": "Certificate generation, verification, and management system",
          "item": [
            {
              "name": "üè• Public Verification",
              "item": [
                {
                  "name": "Verify Certificate",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/verify/{{certificate_id}}",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "verify",
                        "{{certificate_id}}"
                      ]
                    },
                    "description": "Verify certificate authenticity using certificate ID"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Certificate verification completed', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('certificate');",
                          "    pm.expect(jsonData.data).to.have.property('isValid');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Verify by QR Code",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/verify/qr",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "verify",
                        "qr"
                      ]
                    },
                    "description": "Verify certificate using QR code data",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"qrData\": \"certificate_qr_data_here\",\n  \"includeDetails\": true\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('QR verification completed', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('isValid');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Verification Stats",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/verify/stats/overview",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "verify",
                        "stats",
                        "overview"
                      ]
                    },
                    "description": "Get public verification statistics"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Verification stats retrieved', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('totalVerifications');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üìä Analytics & Reports",
          "description": "Comprehensive analytics and reporting system",
          "item": [
            {
              "name": "üìà Reports",
              "item": [
                {
                  "name": "Get Reports Overview",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{admin_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/reports/overview",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "reports",
                        "overview"
                      ]
                    },
                    "description": "Get overview of available reports and recent activity"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Reports overview retrieved', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('availableReports');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Create Custom Report",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{admin_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/reports/custom",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "reports",
                        "custom"
                      ]
                    },
                    "description": "Create a custom report with specific metrics and filters",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"name\": \"Monthly Course Performance\",\n  \"type\": \"course_analytics\",\n  \"filters\": {\n    \"startDate\": \"2025-01-01\",\n    \"endDate\": \"2025-01-31\",\n    \"courseIds\": [\n      \"{{course_id}}\"\n    ],\n    \"instructorIds\": [\n      \"{{teacher_id}}\"\n    ],\n    \"categories\": [\n      \"programming\",\n      \"web-development\"\n    ]\n  },\n  \"metrics\": [\n    \"enrollments\",\n    \"completions\",\n    \"revenue\",\n    \"ratings\"\n  ],\n  \"format\": \"pdf\",\n  \"schedule\": {\n    \"enabled\": true,\n    \"frequency\": \"monthly\",\n    \"recipients\": [\n      \"admin@lms.com\"\n    ]\n  },\n  \"visualization\": {\n    \"charts\": [\n      \"line\",\n      \"bar\",\n      \"pie\"\n    ],\n    \"includeComparisons\": true,\n    \"previousPeriod\": true\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Custom report created successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('reportId');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "üìä Metrics",
              "item": [
                {
                  "name": "Get System Metrics",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{admin_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/metrics/system",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "metrics",
                        "system"
                      ]
                    },
                    "description": "Get comprehensive system performance metrics"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('System metrics retrieved', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('performance');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "üè¢ Admin Management System",
      "description": "Complete administrative interface for managing users, courses, content moderation, and system operations",
      "item": [
        {
          "name": "üìä Dashboard",
          "item": [
            {
              "name": "Get Admin Dashboard",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/dashboard",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "dashboard"
                  ]
                },
                "description": "Get comprehensive admin dashboard with key metrics and insights"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Admin dashboard loaded successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('overview');",
                      "    pm.expect(jsonData.data).to.have.property('metrics');",
                      "    pm.expect(jsonData.data).to.have.property('recentActivity');",
                      "});",
                      "pm.test('Dashboard contains key metrics', function () {",
                      "    const data = pm.response.json().data;",
                      "    pm.expect(data.metrics).to.have.property('totalUsers');",
                      "    pm.expect(data.metrics).to.have.property('totalCourses');",
                      "    pm.expect(data.metrics).to.have.property('totalRevenue');",
                      "    pm.expect(data.metrics).to.have.property('activeEnrollments');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üë• User Management",
          "item": [
            {
              "name": "Get All Users",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users?page=1&limit=20&role=all&status=all&search=&sortBy=createdAt&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "Items per page"
                    },
                    {
                      "key": "role",
                      "value": "all",
                      "description": "Filter by user role"
                    },
                    {
                      "key": "status",
                      "value": "all",
                      "description": "Filter by user status"
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Search by name or email"
                    },
                    {
                      "key": "sortBy",
                      "value": "createdAt",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get paginated list of all users with filtering options"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Users retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('users');",
                      "    pm.expect(jsonData.data).to.have.property('pagination');",
                      "    pm.expect(jsonData.data).to.have.property('filters');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users"
                  ]
                },
                "description": "Create a new user account with admin privileges",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"jane.smith@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"role\": \"teacher\",\n  \"isActive\": true,\n  \"emailVerified\": true,\n  \"profile\": {\n    \"phoneNumber\": \"+1234567890\",\n    \"dateOfBirth\": \"1985-05-15\",\n    \"gender\": \"female\",\n    \"country\": \"United States\",\n    \"city\": \"San Francisco\",\n    \"bio\": \"Experienced web developer and instructor\",\n    \"expertise\": [\n      \"JavaScript\",\n      \"React\",\n      \"Node.js\"\n    ],\n    \"socialLinks\": {\n      \"linkedin\": \"https://linkedin.com/in/janesmith\",\n      \"github\": \"https://github.com/janesmith\"\n    }\n  },\n  \"preferences\": {\n    \"language\": \"en\",\n    \"timezone\": \"America/Los_Angeles\",\n    \"emailNotifications\": true,\n    \"marketingEmails\": false\n  },\n  \"sendWelcomeEmail\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('user');",
                      "    pm.expect(jsonData.data.user.email).to.eql('jane.smith@example.com');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get User by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users/{{user_id}}?includeActivity=true&includeEnrollments=true&includePayments=true",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users",
                    "{{user_id}}"
                  ],
                  "query": [
                    {
                      "key": "includeActivity",
                      "value": "true",
                      "description": "Include user activity history"
                    },
                    {
                      "key": "includeEnrollments",
                      "value": "true",
                      "description": "Include course enrollments"
                    },
                    {
                      "key": "includePayments",
                      "value": "true",
                      "description": "Include payment history"
                    }
                  ]
                },
                "description": "Get detailed information about a specific user"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User details retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('user');",
                      "    pm.expect(jsonData.data).to.have.property('activity');",
                      "    pm.expect(jsonData.data).to.have.property('enrollments');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update User",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users/{{user_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users",
                    "{{user_id}}"
                  ]
                },
                "description": "Update user information and settings",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"Jane Updated\",\n  \"lastName\": \"Smith Updated\",\n  \"email\": \"jane.smith.updated@example.com\",\n  \"role\": \"teacher\",\n  \"isActive\": true,\n  \"profile\": {\n    \"phoneNumber\": \"+1234567891\",\n    \"bio\": \"Updated bio: Senior web developer and course instructor\"\n  },\n  \"adminNotes\": \"Updated user information as requested\",\n  \"notifyUser\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User updated successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.user.firstName).to.eql('Jane Updated');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete User",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users/{{user_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users",
                    "{{user_id}}"
                  ]
                },
                "description": "Delete a user account (soft delete with data retention)",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"User requested account deletion\",\n  \"retainData\": true,\n  \"notifyUser\": true,\n  \"transferContent\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User deleted successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Bulk Update User Status",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/users/bulk/status",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "users",
                    "bulk",
                    "status"
                  ]
                },
                "description": "Update status for multiple users simultaneously",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\n    \"{{user_id}}\"\n  ],\n  \"status\": \"active\",\n  \"reason\": \"Bulk activation after verification\",\n  \"notifyUsers\": true,\n  \"sendEmail\": false\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Bulk status update completed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('updatedCount');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üìö Course Management",
          "item": [
            {
              "name": "Get All Courses",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/courses?page=1&limit=20&status=all&category=all&instructor=&search=&sortBy=createdAt&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "courses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "Items per page"
                    },
                    {
                      "key": "status",
                      "value": "all",
                      "description": "Filter by course status"
                    },
                    {
                      "key": "category",
                      "value": "all",
                      "description": "Filter by category"
                    },
                    {
                      "key": "instructor",
                      "value": "",
                      "description": "Filter by instructor"
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Search by title or description"
                    },
                    {
                      "key": "sortBy",
                      "value": "createdAt",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get comprehensive list of all courses with detailed information"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Courses retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('courses');",
                      "    pm.expect(jsonData.data).to.have.property('pagination');",
                      "    pm.expect(jsonData.data).to.have.property('statistics');",
                      "});",
                      "// Auto-capture first course ID for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.courses && response.data.courses.length > 0) {",
                      "        pm.collectionVariables.set('course_id', response.data.courses[0]._id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Create Course",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/courses",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "courses"
                  ]
                },
                "description": "Create a new course with comprehensive details",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Advanced JavaScript Programming\",\n  \"description\": \"Master advanced JavaScript concepts and modern development practices with hands-on projects and real-world applications\",\n  \"shortDescription\": \"Learn advanced JavaScript concepts with practical examples\",\n  \"price\": 99.99,\n  \"originalPrice\": 149.99,\n  \"currency\": \"USD\",\n  \"duration\": 40,\n  \"difficulty\": \"advanced\",\n  \"category\": \"programming\",\n  \"subcategory\": \"javascript\",\n  \"targetAudience\": \"developers\",\n  \"ageGroup\": \"adult\",\n  \"instructorId\": \"{{teacher_id}}\",\n  \"thumbnail\": \"https://example.com/course-thumbnail.jpg\",\n  \"previewVideo\": \"https://example.com/preview-video.mp4\",\n  \"objectives\": [\n    \"Master ES6+ features and modern JavaScript syntax\",\n    \"Build complex applications with advanced patterns\",\n    \"Understand asynchronous programming and promises\",\n    \"Implement testing strategies for JavaScript code\"\n  ],\n  \"prerequisites\": [\n    \"Basic JavaScript knowledge\",\n    \"Understanding of HTML/CSS\",\n    \"Familiarity with programming concepts\"\n  ],\n  \"tags\": [\n    \"javascript\",\n    \"programming\",\n    \"web-development\",\n    \"advanced\"\n  ],\n  \"language\": \"en\",\n  \"status\": \"draft\",\n  \"isPublished\": false,\n  \"isFeatured\": false,\n  \"accessibility\": {\n    \"subtitles\": true,\n    \"audioDescription\": false,\n    \"screenReaderCompatible\": true,\n    \"slowPaced\": false\n  },\n  \"technicalRequirements\": {\n    \"bandwidth\": \"medium\",\n    \"devices\": [\n      \"desktop\",\n      \"laptop\",\n      \"tablet\"\n    ],\n    \"software\": [\n      \"modern browser\",\n      \"code editor\"\n    ],\n    \"browsers\": [\n      \"Chrome\",\n      \"Firefox\",\n      \"Safari\",\n      \"Edge\"\n    ]\n  },\n  \"learningPath\": \"structured\",\n  \"gamification\": {\n    \"enabled\": true,\n    \"badges\": [\n      \"completion\",\n      \"excellence\",\n      \"participation\"\n    ],\n    \"points\": 1000,\n    \"leaderboard\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Course created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('course');",
                      "    pm.expect(jsonData.data.course.title).to.eql('Advanced JavaScript Programming');",
                      "});",
                      "// Store the new course ID",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.course && response.data.course._id) {",
                      "        pm.collectionVariables.set('course_id', response.data.course._id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Update Course",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/courses/{{course_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "courses",
                    "{{course_id}}"
                  ]
                },
                "description": "Update course information and settings",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Advanced JavaScript Programming - Updated Edition\",\n  \"description\": \"Updated description with new content and examples\",\n  \"price\": 129.99,\n  \"status\": \"published\",\n  \"isPublished\": true,\n  \"isFeatured\": true,\n  \"adminNotes\": \"Updated course content and pricing\",\n  \"changeReason\": \"Content enhancement and market adjustment\",\n  \"notifyEnrolledStudents\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Course updated successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.course.title).to.include('Updated Edition');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Delete Course",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/courses/{{course_id}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "courses",
                    "{{course_id}}"
                  ]
                },
                "description": "Delete a course (with options for data retention)",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Course content outdated\",\n  \"retainEnrollmentData\": true,\n  \"refundStudents\": true,\n  \"notifyInstructor\": true,\n  \"transferToAlternativeCourse\": null\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Course deleted successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üí¨ Comment Moderation",
          "item": [
            {
              "name": "Get Moderation Queue",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/comments/moderation?status=pending&page=1&limit=20&priority=all&contentType=all&reportCount=0&sortBy=createdAt&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "comments",
                    "moderation"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "pending",
                      "description": "Filter by moderation status"
                    },
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "Items per page"
                    },
                    {
                      "key": "priority",
                      "value": "all",
                      "description": "Filter by priority level"
                    },
                    {
                      "key": "contentType",
                      "value": "all",
                      "description": "Filter by content type"
                    },
                    {
                      "key": "reportCount",
                      "value": "0",
                      "description": "Minimum report count"
                    },
                    {
                      "key": "sortBy",
                      "value": "createdAt",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get comments pending moderation with filtering options"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Moderation queue retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('comments');",
                      "    pm.expect(jsonData.data).to.have.property('pagination');",
                      "    pm.expect(jsonData.data).to.have.property('summary');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Moderate Comment",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/comments/{{comment_id}}/moderate",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "comments",
                    "{{comment_id}}",
                    "moderate"
                  ]
                },
                "description": "Approve, reject, or flag a comment with detailed reasoning",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"approve\",\n  \"reason\": \"Comment follows community guidelines and provides valuable insight\",\n  \"moderatorNotes\": \"Well-written comment with constructive feedback\",\n  \"notifyAuthor\": true,\n  \"publicReason\": \"Approved for constructive content\",\n  \"escalate\": false,\n  \"tags\": [\n    \"constructive\",\n    \"helpful\"\n  ],\n  \"reviewedBy\": \"{{admin_id}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Comment moderated successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('comment');",
                      "    pm.expect(jsonData.data.comment.moderationStatus).to.eql('approved');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Bulk Moderate Comments",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/comments/bulk-moderate",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "comments",
                    "bulk-moderate"
                  ]
                },
                "description": "Moderate multiple comments simultaneously",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"commentIds\": [\n    \"{{comment_id}}\"\n  ],\n  \"action\": \"approve\",\n  \"reason\": \"Bulk approval of acceptable comments\",\n  \"moderatorNotes\": \"Reviewed batch - all comments meet community standards\",\n  \"notifyAuthors\": false,\n  \"applyToSimilar\": true,\n  \"similarityThreshold\": 0.8\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Bulk moderation completed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('processedCount');",
                      "    pm.expect(jsonData.data).to.have.property('results');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Moderation Stats",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/admin/comments/moderation-stats?period=month&groupBy=day&includeTrends=true",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "admin",
                    "comments",
                    "moderation-stats"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "month",
                      "description": "Time period for statistics"
                    },
                    {
                      "key": "groupBy",
                      "value": "day",
                      "description": "Group statistics by time unit"
                    },
                    {
                      "key": "includeTrends",
                      "value": "true",
                      "description": "Include trend analysis"
                    }
                  ]
                },
                "description": "Get comprehensive moderation statistics and trends"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Moderation stats retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('overview');",
                      "    pm.expect(jsonData.data).to.have.property('trends');",
                      "    pm.expect(jsonData.data).to.have.property('moderatorPerformance');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "üë§ Client System",
      "description": "Client-facing functionality for students and teachers including course access, learning tools, and personal management",
      "item": [
        {
          "name": "üìä Dashboard",
          "item": [
            {
              "name": "Get Client Dashboard",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/dashboard",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "dashboard"
                  ]
                },
                "description": "Get personalized dashboard for students and teachers"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Client dashboard loaded successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('overview');",
                      "    pm.expect(jsonData.data).to.have.property('recentActivity');",
                      "    pm.expect(jsonData.data).to.have.property('recommendations');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üìö Courses",
          "item": [
            {
              "name": "Get All Published Courses",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/courses?page=1&limit=12&category=all&difficulty=all&price=all&rating=0&search=&sortBy=popularity&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "courses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "12",
                      "description": "Items per page"
                    },
                    {
                      "key": "category",
                      "value": "all",
                      "description": "Filter by category"
                    },
                    {
                      "key": "difficulty",
                      "value": "all",
                      "description": "Filter by difficulty"
                    },
                    {
                      "key": "price",
                      "value": "all",
                      "description": "Filter by price range"
                    },
                    {
                      "key": "rating",
                      "value": "0",
                      "description": "Minimum rating filter"
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Search query"
                    },
                    {
                      "key": "sortBy",
                      "value": "popularity",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get paginated list of published courses available for enrollment"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Published courses retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('courses');",
                      "    pm.expect(jsonData.data).to.have.property('pagination');",
                      "    pm.expect(jsonData.data).to.have.property('filters');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get Course by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/courses/{{course_id}}?includeReviews=true&includeInstructor=true&includeSections=false",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "courses",
                    "{{course_id}}"
                  ],
                  "query": [
                    {
                      "key": "includeReviews",
                      "value": "true",
                      "description": "Include course reviews"
                    },
                    {
                      "key": "includeInstructor",
                      "value": "true",
                      "description": "Include instructor details"
                    },
                    {
                      "key": "includeSections",
                      "value": "false",
                      "description": "Include course sections (preview)"
                    }
                  ]
                },
                "description": "Get detailed information about a specific course"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Course details retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('course');",
                      "    pm.expect(jsonData.data).to.have.property('instructor');",
                      "    pm.expect(jsonData.data).to.have.property('reviews');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Enroll in Course",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/courses/{{course_id}}/enroll",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "courses",
                    "{{course_id}}",
                    "enroll"
                  ]
                },
                "description": "Enroll in a course (free courses or after payment)",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"paymentId\": \"{{payment_id}}\",\n  \"couponCode\": \"WELCOME10\",\n  \"giftRecipient\": null,\n  \"enrollmentType\": \"individual\",\n  \"startDate\": \"immediate\",\n  \"preferences\": {\n    \"emailNotifications\": true,\n    \"deadlineReminders\": true,\n    \"progressTracking\": true\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Course enrollment successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('enrollment');",
                      "    pm.expect(jsonData.data.enrollment.status).to.eql('active');",
                      "});",
                      "// Store enrollment ID for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.enrollment && response.data.enrollment._id) {",
                      "        pm.collectionVariables.set('enrollment_id', response.data.enrollment._id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Get My Enrolled Courses",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/courses/my-courses?page=1&limit=10&status=all&progress=all&sortBy=enrolledAt&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "courses",
                    "my-courses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "10",
                      "description": "Items per page"
                    },
                    {
                      "key": "status",
                      "value": "all",
                      "description": "Filter by enrollment status"
                    },
                    {
                      "key": "progress",
                      "value": "all",
                      "description": "Filter by progress level"
                    },
                    {
                      "key": "sortBy",
                      "value": "enrolledAt",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get list of courses the user is enrolled in"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Enrolled courses retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('enrollments');",
                      "    pm.expect(jsonData.data).to.have.property('summary');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "üë®‚Äçüè´ Teacher Features",
          "item": [
            {
              "name": "üìä Teacher Dashboard",
              "item": [
                {
                  "name": "Get Teacher Dashboard",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{teacher_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/client/teacher-dashboard",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "client",
                        "teacher-dashboard"
                      ]
                    },
                    "description": "Get comprehensive teacher dashboard with performance metrics"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Teacher dashboard loaded successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('overview');",
                          "    pm.expect(jsonData.data).to.have.property('courseMetrics');",
                          "    pm.expect(jsonData.data).to.have.property('studentFeedback');",
                          "    pm.expect(jsonData.data).to.have.property('recentActivity');",
                          "});"
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "Get Performance Metrics",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{teacher_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/client/teacher-dashboard/performance?period=monthly&courseId={{course_id}}&includeComparisons=true",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "client",
                        "teacher-dashboard",
                        "performance"
                      ],
                      "query": [
                        {
                          "key": "period",
                          "value": "monthly",
                          "description": "Time period for metrics"
                        },
                        {
                          "key": "courseId",
                          "value": "{{course_id}}",
                          "description": "Filter by specific course"
                        },
                        {
                          "key": "includeComparisons",
                          "value": "true",
                          "description": "Include peer comparisons"
                        }
                      ]
                    },
                    "description": "Get detailed teacher performance analytics"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Performance metrics retrieved successfully', function () {",
                          "    pm.response.to.have.status(200);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('metrics');",
                          "    pm.expect(jsonData.data).to.have.property('trends');",
                          "    pm.expect(jsonData.data).to.have.property('comparisons');",
                          "});"
                        ]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "‚≠ê Teacher Rating System",
              "item": [
                {
                  "name": "Submit Teacher Rating",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{client_token}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{base_url}}/api/client/teacher-rating/submit",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "api",
                        "client",
                        "teacher-rating",
                        "submit"
                      ]
                    },
                    "description": "Submit a rating and review for a teacher",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"teacherId\": \"{{teacher_id}}\",\n  \"courseId\": \"{{course_id}}\",\n  \"ratings\": {\n    \"teaching\": 4.5,\n    \"communication\": 4.8,\n    \"knowledge\": 4.9,\n    \"support\": 4.2\n  },\n  \"feedback\": \"Excellent teacher! Very clear explanations and helpful responses to questions. The course content is well-structured and engaging.\",\n  \"wouldRecommend\": true,\n  \"anonymous\": false,\n  \"completedCourse\": true,\n  \"courseProgress\": 95,\n  \"tags\": [\n    \"clear-explanations\",\n    \"responsive\",\n    \"knowledgeable\"\n  ],\n  \"improvementSuggestions\": \"Maybe add more real-world examples in advanced topics\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Teacher rating submitted successfully', function () {",
                          "    pm.response.to.have.status(201);",
                          "    const jsonData = pm.response.json();",
                          "    pm.expect(jsonData.success).to.be.true;",
                          "    pm.expect(jsonData.data).to.have.property('rating');",
                          "    pm.expect(jsonData.data.rating.teacherId).to.eql(pm.collectionVariables.get('teacher_id'));",
                          "});",
                          "// Store rating ID for subsequent requests",
                          "if (pm.response.code === 201) {",
                          "    const response = pm.response.json();",
                          "    if (response.data && response.data.rating && response.data.rating._id) {",
                          "        pm.collectionVariables.set('rating_id', response.data.rating._id);",
                          "    }",
                          "}"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "üìÑ Certificate Management",
          "item": [
            {
              "name": "Get My Certificates",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/certificates?page=1&limit=10&courseId=&status=active&sortBy=issueDate&sortOrder=desc",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "certificates"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "10",
                      "description": "Items per page"
                    },
                    {
                      "key": "courseId",
                      "value": "",
                      "description": "Filter by course"
                    },
                    {
                      "key": "status",
                      "value": "active",
                      "description": "Filter by certificate status"
                    },
                    {
                      "key": "sortBy",
                      "value": "issueDate",
                      "description": "Sort field"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc",
                      "description": "Sort order"
                    }
                  ]
                },
                "description": "Get list of certificates earned by the user"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Certificates retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('certificates');",
                      "    pm.expect(jsonData.data).to.have.property('summary');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Request Certificate",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/certificates/request",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "certificates",
                    "request"
                  ]
                },
                "description": "Request a certificate for a completed course",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"courseId\": \"{{course_id}}\",\n  \"templateId\": \"default\",\n  \"customization\": {\n    \"name\": \"John Doe\",\n    \"additionalText\": \"With Distinction\",\n    \"language\": \"en\"\n  },\n  \"deliveryOptions\": {\n    \"email\": true,\n    \"download\": true,\n    \"physicalCopy\": false\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Certificate requested successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('certificate');",
                      "});",
                      "// Store certificate ID for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.certificate && response.data.certificate._id) {",
                      "        pm.collectionVariables.set('certificate_id', response.data.certificate._id);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Download Certificate",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{client_token}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/client/certificates/{{certificate_id}}/download?format=pdf&quality=high&watermark=false",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "api",
                    "client",
                    "certificates",
                    "{{certificate_id}}",
                    "download"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "pdf",
                      "description": "Download format"
                    },
                    {
                      "key": "quality",
                      "value": "high",
                      "description": "Image quality"
                    },
                    {
                      "key": "watermark",
                      "value": "false",
                      "description": "Include watermark"
                    }
                  ]
                },
                "description": "Download certificate as PDF"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Certificate download initiated', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}