import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Announcement from '../../shared/models/communication/Announcement';
import User from '../../shared/models/core/User';

dotenv.config();

const announcementSeedData = [
    {
        title: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng LMS',
        content: 'Ch√∫ng t√¥i r·∫•t vui m·ª´ng ch√†o ƒë√≥n b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng h·ªçc t·∫≠p tr·ª±c tuy·∫øn c·ªßa ch√∫ng t√¥i. H√£y kh√°m ph√° c√°c kh√≥a h·ªçc th√∫ v·ªã v√† b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n!',
        type: 'general',
        priority: 'normal',
        target: {
            type: 'all',
            value: undefined
        },
        isScheduled: false,
        status: 'published',
        publishedAt: new Date(),
        tags: ['welcome', 'general'],
        displayOptions: {
            showAsPopup: false,
            showOnDashboard: true,
            sendEmail: true,
            sendPush: false,
            requireAcknowledgment: false
        },
        analytics: {
            totalViews: 156,
            totalClicks: 23,
            totalAcknowledgments: 0
        }
    },
    {
        title: 'C·∫≠p nh·∫≠t h·ªá th·ªëng - B·∫£o tr√¨ ƒë·ªãnh k·ª≥',
        content: 'H·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ ƒë·ªãnh k·ª≥ v√†o ng√†y mai t·ª´ 2:00 - 4:00 s√°ng. Trong th·ªùi gian n√†y, m·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng kh·∫£ d·ª•ng. Ch√∫ng t√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.',
        type: 'maintenance',
        priority: 'high',
        target: {
            type: 'all',
            value: undefined
        },
        isScheduled: false,
        status: 'published',
        publishedAt: new Date(Date.now() - 86400000), // 1 day ago
        tags: ['maintenance', 'update', 'system'],
        displayOptions: {
            showAsPopup: true,
            showOnDashboard: true,
            sendEmail: true,
            sendPush: true,
            requireAcknowledgment: true
        },
        analytics: {
            totalViews: 89,
            totalClicks: 12,
            totalAcknowledgments: 45
        }
    },
    {
        title: 'Kh√≥a h·ªçc m·ªõi: React Native t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao',
        content: 'Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o v·ªÅ vi·ªác ra m·∫Øt kh√≥a h·ªçc React Native m·ªõi. Kh√≥a h·ªçc n√†y s·∫Ω gi√∫p b·∫°n ph√°t tri·ªÉn ·ª©ng d·ª•ng mobile cross-platform m·ªôt c√°ch chuy√™n nghi·ªáp.',
        type: 'course',
        priority: 'normal',
        target: {
            type: 'role',
            value: ['student']
        },
        isScheduled: false,
        status: 'published',
        publishedAt: new Date(Date.now() - 172800000), // 2 days ago
        tags: ['course', 'react-native', 'mobile-development'],
        displayOptions: {
            showAsPopup: false,
            showOnDashboard: true,
            sendEmail: true,
            sendPush: false,
            requireAcknowledgment: false
        },
        analytics: {
            totalViews: 234,
            totalClicks: 67,
            totalAcknowledgments: 0
        }
    }
];

export const seedAnnouncementData = async () => {
    try {
        console.log('üå± B·∫Øt ƒë·∫ßu seeding announcement data...');

        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/lms');
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB');

        // Get admin user for createdBy
        const adminUser = await User.findOne({ role: 'admin' });
        if (!adminUser) {
            throw new Error('Kh√¥ng t√¨m th·∫•y admin user ƒë·ªÉ t·∫°o announcements');
        }

        // Clear existing announcements
        await Announcement.deleteMany({});
        console.log('üßπ ƒê√£ x√≥a announcements c≈©');

        // Create announcements with admin as creator
        const announcementsWithCreator = announcementSeedData.map(announcement => ({
            ...announcement,
            createdBy: {
                userId: adminUser._id,
                name: adminUser.name || `${adminUser.firstName} ${adminUser.lastName}`,
                role: adminUser.role
            }
        }));

        const createdAnnouncements = await Announcement.insertMany(announcementsWithCreator);
        console.log(`‚úÖ ƒê√£ t·∫°o ${createdAnnouncements.length} announcements`);

        console.log('üéâ Seeding announcements ho√†n th√†nh!');

        await mongoose.connection.close();
    } catch (error) {
        console.error('‚ùå L·ªói seeding announcements:', error);
        throw error;
    }
};

// Run if called directly
if (require.main === module) {
    seedAnnouncementData()
        .then(() => {
            console.log('‚úÖ Seeding ho√†n th√†nh');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Seeding th·∫•t b·∫°i:', error);
            process.exit(1);
        });
}
